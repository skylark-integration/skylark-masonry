{"version":3,"sources":["Masonry.js"],"names":["define","skylark","jQuery","console","window","instances","Masonry","element","options","queryElement","getQueryElement","this","$element","extend","constructor","defaults","option","id","GUID","data","_create","_getOption","layout","error","namespace","Item","elem","position","x","y","prototype","getSize","size","outerWidth","$","outerHeight","goTo","parseInt","css","left","top","moveTo","moveto","containerStyle","initLayout","originLeft","originTop","resize","resizeContainer","transitionDuration","hiddenStyle","opacity","transform","visibleStyle","compatOptions","horizontal","layoutInstant","fitWidth","width","height","_resetLayout","_getMeasurement","measureColumns","colYs","i","cols","push","maxY","getContainerWidth","columnWidth","firstItem","items","containerWidth","gutter","excess","Math","max","container","parentNode","_getItemLayoutPosition","item","remainder","colSpan","min","colGroup","_getColGroup","minimumY","apply","shortColIndex","indexOf","setHeight","setSpan","length","groupCount","groupColYs","slice","_manageStamp","stamp","stampSize","offset","_getElementOffset","firstX","right","lastX","firstCol","floor","lastCol","stampMaxY","bottom","_getContainerSize","_getContainerFitWidth","unusedCols","needsResizeLayout","previousWidth","proto","document","querySelector","makeArray","obj","ary","Array","isArray","len","opts","oldOption","undefined","reloadItems","style","_itemize","children","elems","itemElems","_filterFindItemElements","selector","ffElems","forEach","HTMLElement","is","childElems","querySelectorAll","filterFindElements","itemSelector","isInstant","_isLayoutInited","layoutItems","measurement","_getItemsForLayout","_layoutItems","_postLayout","filter","isIgnored","queue","isLayoutInstant","_processLayoutQueue","_positionItem","_setContainerMeasure","measure","isWidth","elemSize","isBorderBox","paddingLeft","paddingRight","borderLeftWidth","borderRightWidth","paddingBottom","paddingTop","borderTopWidth","borderBottomWidth","addItems","concat","appended","reveal","prepended","previousItems","hide","revealItemElements","getItems","hideItemElements","getItem","remove","removeItems","index","splice","attach"],"mappings":"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","file":"../Masonry.js","sourcesContent":["define([\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-jquery\"\r\n], function (skylark,jQuery) {\r\n\r\n    'use strict';\r\n\r\n    var console = window.console;\r\n    var noop = function() {};\r\n    var instances = {};\r\n\r\n    // -------------------------- masonryDefinition -------------------------- //\r\n\r\n    // create an Outlayer layout class\r\n    //var Masonry = Outlayer.create('masonry');\r\n\r\n    /**\r\n     * @param {Element, String} element\r\n     * @param {Object} options\r\n     * @constructor\r\n     */\r\n    function Masonry(element, options) {\r\n        var queryElement = getQueryElement(element);\r\n        if (!queryElement) {\r\n            if (console) {\r\n                console.error('Bad element for ' + this.constructor.namespace +\r\n                    ': ' + (queryElement || element));\r\n            }\r\n            return;\r\n        }\r\n        this.element = queryElement;\r\n        // add jQuery\r\n        if (jQuery) {\r\n            this.$element = jQuery(this.element);\r\n        }\r\n\r\n        // options\r\n        this.options = jQuery.extend({}, this.constructor.defaults);\r\n        this.option(options);\r\n\r\n        // add id for Outlayer.getFromElement\r\n        var id = ++GUID;\r\n        this.$element.data(\"outlayerGUID\", id); // expando\r\n        instances[id] = this; // associate via id\r\n\r\n        // kick it off\r\n        this._create();\r\n\r\n        var isInitLayout = this._getOption('initLayout');\r\n        if (isInitLayout) {\r\n            this.layout();\r\n        }\r\n    }\r\n\r\n    // settings are for internal use only\r\n    Masonry.namespace = 'masonry';\r\n    Masonry.Item = function(elem, layout) {\r\n        this.element = elem;\r\n        this.layout = layout;\r\n        this.position = {\r\n            x: 0,\r\n            y: 0\r\n        };\r\n    };\r\n    Masonry.Item.prototype.getSize = function() {\r\n        return this.size = {\r\n            outerWidth: $(this.element).outerWidth(true),\r\n            outerHeight: $(this.element).outerHeight(true)\r\n        };\r\n    };\r\n    Masonry.Item.prototype.goTo = function(x, y) {\r\n        this.position.x = parseInt(x, 10);\r\n        this.position.y = parseInt(y, 10);\r\n        $(this.element).css({\r\n            position: \"absolute\",\r\n            left: this.position.x + \"px\",\r\n            top: this.position.y + \"px\"\r\n        });\r\n    };\r\n    Masonry.Item.prototype.moveTo = function(x, y) {\r\n        //this.goTo(x,y);\r\n        //$(this.element).slideInDown();\r\n        $(this.element).css({\r\n            position: \"absolute\",\r\n        });\r\n        $(this.element).moveto(x, y);\r\n    };\r\n    // default options\r\n    Masonry.defaults = {\r\n        containerStyle: {\r\n            position: 'relative'\r\n        },\r\n        initLayout: true,\r\n        originLeft: true,\r\n        originTop: true,\r\n        resize: true,\r\n        resizeContainer: true,\r\n        // item options\r\n        transitionDuration: '0.4s',\r\n        hiddenStyle: {\r\n            opacity: 0,\r\n            transform: 'scale(0.001)'\r\n        },\r\n        visibleStyle: {\r\n            opacity: 1,\r\n            transform: 'scale(1)'\r\n        }\r\n    };\r\n\r\n    Masonry.compatOptions = {\r\n        // currentName: oldName\r\n        initLayout: 'isInitLayout',\r\n        horizontal: 'isHorizontal',\r\n        layoutInstant: 'isLayoutInstant',\r\n        originLeft: 'isOriginLeft',\r\n        originTop: 'isOriginTop',\r\n        resize: 'isResizeBound',\r\n        resizeContainer: 'isResizingContainer'\r\n    };\r\n\r\n\r\n    // isFitWidth -> fitWidth\r\n    Masonry.compatOptions.fitWidth = 'isFitWidth';\r\n\r\n    Masonry.prototype.getSize = function() {\r\n        this.size = {\r\n            width: $(this.element).width(),\r\n            height: $(this.element).height()\r\n        };\r\n    };\r\n    Masonry.prototype._resetLayout = function() {\r\n        this.getSize();\r\n        this._getMeasurement('columnWidth', 'outerWidth');\r\n        this._getMeasurement('gutter', 'outerWidth');\r\n        this.measureColumns();\r\n\r\n        // reset column Y\r\n        this.colYs = [];\r\n        for (var i = 0; i < this.cols; i++) {\r\n            this.colYs.push(0);\r\n        }\r\n\r\n        this.maxY = 0;\r\n    };\r\n\r\n    Masonry.prototype.measureColumns = function() {\r\n        this.getContainerWidth();\r\n        // if columnWidth is 0, default to outerWidth of first item\r\n        if (!this.columnWidth) {\r\n            var firstItem = this.items[0];\r\n            var firstItemElem = firstItem && firstItem.element;\r\n            // columnWidth fall back to item of first element\r\n            this.columnWidth = firstItem && firstItem.getSize().outerWidth ||\r\n                // if first elem has no width, default to size of container\r\n                this.containerWidth;\r\n        }\r\n\r\n        var columnWidth = this.columnWidth += this.gutter;\r\n\r\n        // calculate columns\r\n        var containerWidth = this.containerWidth + this.gutter;\r\n        var cols = containerWidth / columnWidth;\r\n        // fix rounding errors, typically with gutters\r\n        var excess = columnWidth - containerWidth % columnWidth;\r\n        // if overshoot is less than a pixel, round up, otherwise floor it\r\n        var mathMethod = excess && excess < 1 ? 'round' : 'floor';\r\n        cols = Math[mathMethod](cols);\r\n        this.cols = Math.max(cols, 1);\r\n    };\r\n\r\n    Masonry.prototype.getContainerWidth = function() {\r\n        // container is parent if fit width\r\n        var isFitWidth = this._getOption('fitWidth');\r\n        var container = isFitWidth ? this.element.parentNode : this.element;\r\n        // check that this.size and size are there\r\n        // IE8 triggers resize on body size change, so they might not be\r\n        //var size = getSize( container );\r\n        //this.containerWidth = size && size.innerWidth;\r\n        this.containerWidth = $(container).width();\r\n    };\r\n\r\n    Masonry.prototype._getItemLayoutPosition = function(item) {\r\n        item.getSize();\r\n        // how many columns does this brick span\r\n        var remainder = item.size.outerWidth % this.columnWidth;\r\n        var mathMethod = remainder && remainder < 1 ? 'round' : 'ceil';\r\n        // round if off by 1 pixel, otherwise use ceil\r\n        var colSpan = Math[mathMethod](item.size.outerWidth / this.columnWidth);\r\n        colSpan = Math.min(colSpan, this.cols);\r\n\r\n        var colGroup = this._getColGroup(colSpan);\r\n        // get the minimum Y value from the columns\r\n        var minimumY = Math.min.apply(Math, colGroup);\r\n        var shortColIndex = colGroup.indexOf(minimumY);\r\n\r\n        // position the brick\r\n        var position = {\r\n            x: this.columnWidth * shortColIndex,\r\n            y: minimumY\r\n        };\r\n\r\n        // apply setHeight to necessary columns\r\n        var setHeight = minimumY + item.size.outerHeight;\r\n        var setSpan = this.cols + 1 - colGroup.length;\r\n        for (var i = 0; i < setSpan; i++) {\r\n            this.colYs[shortColIndex + i] = setHeight;\r\n        }\r\n\r\n        return position;\r\n    };\r\n\r\n    /**\r\n     * @param {Number} colSpan - number of columns the element spans\r\n     * @returns {Array} colGroup\r\n     */\r\n    Masonry.prototype._getColGroup = function(colSpan) {\r\n        if (colSpan < 2) {\r\n            // if brick spans only one column, use all the column Ys\r\n            return this.colYs;\r\n        }\r\n\r\n        var colGroup = [];\r\n        // how many different places could this brick fit horizontally\r\n        var groupCount = this.cols + 1 - colSpan;\r\n        // for each group potential horizontal position\r\n        for (var i = 0; i < groupCount; i++) {\r\n            // make an array of colY values for that one group\r\n            var groupColYs = this.colYs.slice(i, i + colSpan);\r\n            // and get the max value of the array\r\n            colGroup[i] = Math.max.apply(Math, groupColYs);\r\n        }\r\n        return colGroup;\r\n    };\r\n\r\n    Masonry.prototype._manageStamp = function(stamp) {\r\n        var stampSize = getSize(stamp);\r\n        var offset = this._getElementOffset(stamp);\r\n        // get the columns that this stamp affects\r\n        var isOriginLeft = this._getOption('originLeft');\r\n        var firstX = isOriginLeft ? offset.left : offset.right;\r\n        var lastX = firstX + stampSize.outerWidth;\r\n        var firstCol = Math.floor(firstX / this.columnWidth);\r\n        firstCol = Math.max(0, firstCol);\r\n        var lastCol = Math.floor(lastX / this.columnWidth);\r\n        // lastCol should not go over if multiple of columnWidth #425\r\n        lastCol -= lastX % this.columnWidth ? 0 : 1;\r\n        lastCol = Math.min(this.cols - 1, lastCol);\r\n        // set colYs to bottom of the stamp\r\n\r\n        var isOriginTop = this._getOption('originTop');\r\n        var stampMaxY = (isOriginTop ? offset.top : offset.bottom) +\r\n            stampSize.outerHeight;\r\n        for (var i = firstCol; i <= lastCol; i++) {\r\n            this.colYs[i] = Math.max(stampMaxY, this.colYs[i]);\r\n        }\r\n    };\r\n\r\n    Masonry.prototype._getContainerSize = function() {\r\n        this.maxY = Math.max.apply(Math, this.colYs);\r\n        var size = {\r\n            height: this.maxY\r\n        };\r\n\r\n        if (this._getOption('fitWidth')) {\r\n            size.width = this._getContainerFitWidth();\r\n        }\r\n\r\n        return size;\r\n    };\r\n\r\n    Masonry.prototype._getContainerFitWidth = function() {\r\n        var unusedCols = 0;\r\n        // count unused columns\r\n        var i = this.cols;\r\n        while (--i) {\r\n            if (this.colYs[i] !== 0) {\r\n                break;\r\n            }\r\n            unusedCols++;\r\n        }\r\n        // fit container to columns that have been used\r\n        return (this.cols - unusedCols) * this.columnWidth - this.gutter;\r\n    };\r\n\r\n    Masonry.prototype.needsResizeLayout = function() {\r\n        var previousWidth = this.containerWidth;\r\n        this.getContainerWidth();\r\n        return previousWidth != this.containerWidth;\r\n    };\r\n\r\n\r\n    //---copy from outlayer\r\n    var proto = Masonry.prototype;\r\n\r\n    // globally unique identifiers\r\n    var GUID = 0;\r\n\r\n    // use element as selector string\r\n    var getQueryElement = function(elem) {\r\n        if (typeof elem == 'string') {\r\n            return document.querySelector(elem);\r\n        }\r\n        return elem;\r\n    };\r\n    // turn element or nodeList into an array\r\n    var makeArray = function(obj) {\r\n        var ary = [];\r\n        if (Array.isArray(obj)) {\r\n            // use object if already an array\r\n            ary = obj;\r\n        } else if (obj && typeof obj.length == 'number') {\r\n            // convert nodeList to array\r\n            for (var i = 0; i < obj.length; i++) {\r\n                ary.push(obj[i]);\r\n            }\r\n        } else {\r\n            // array of single index\r\n            ary.push(obj);\r\n        }\r\n        return ary;\r\n    };\r\n    var indexOf = Array.prototype.indexOf ? function(ary, obj) {\r\n        return ary.indexOf(obj);\r\n    } : function(ary, obj) {\r\n        for (var i = 0, len = ary.length; i < len; i++) {\r\n            if (ary[i] === obj) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    };\r\n\r\n    var removeFrom = function(ary, obj) {\r\n        var index = indexOf(ary, obj);\r\n        if (index != -1) {\r\n            ary.splice(index, 1);\r\n        }\r\n    };\r\n\r\n    var filterFindElements = function(elems, selector) {\r\n        // make array of elems\r\n        elems = makeArray(elems);\r\n        var ffElems = [];\r\n\r\n        elems.forEach(function(elem) {\r\n            // check that elem is an actual element\r\n            if (!(elem instanceof HTMLElement)) {\r\n                return;\r\n            }\r\n            // add elem if no selector\r\n            if (!selector) {\r\n                ffElems.push(elem);\r\n                return;\r\n            }\r\n            // filter & find items if we have a selector\r\n            // filter\r\n            //if ( matchesSelector( elem, selector ) ) {\r\n            if (jQuery(elem).is(selector)) {\r\n                ffElems.push(elem);\r\n            }\r\n            // find children\r\n            var childElems = elem.querySelectorAll(selector);\r\n            // concat childElems to filterFound array\r\n            for (var i = 0; i < childElems.length; i++) {\r\n                ffElems.push(childElems[i]);\r\n            }\r\n        });\r\n\r\n        return ffElems;\r\n    };\r\n\r\n    /**\r\n     * set options\r\n     * @param {Object} opts\r\n     */\r\n    proto.option = function(opts) {\r\n        jQuery.extend(this.options, opts);\r\n    };\r\n\r\n    /**\r\n     * get backwards compatible option value, check old name\r\n     */\r\n    proto._getOption = function(option) {\r\n        var oldOption = this.constructor.compatOptions[option];\r\n        return oldOption && this.options[oldOption] !== undefined ?\r\n            this.options[oldOption] : this.options[option];\r\n    };\r\n\r\n    proto._create = function() {\r\n        // get items from children\r\n        this.reloadItems();\r\n        // elements that affect layout, but are not laid out\r\n        //this.stamps = [];\r\n        //this.stamp( this.options.stamp );\r\n        // set container style\r\n        jQuery.extend(this.element.style, this.options.containerStyle);\r\n\r\n        // bind resize method\r\n        //var canBindResize = this._getOption('resize');\r\n        //if ( canBindResize ) {\r\n        //  this.bindResize();\r\n        //}\r\n    };\r\n\r\n    // goes through all children again and gets bricks in proper order\r\n    proto.reloadItems = function() {\r\n        // collection of item elements\r\n        this.items = this._itemize(this.element.children);\r\n    };\r\n\r\n\r\n    /**\r\n     * turn elements into Outlayer.Items to be used in layout\r\n     * @param {Array or NodeList or HTMLElement} elems\r\n     * @returns {Array} items - collection of new Outlayer Items\r\n     */\r\n    proto._itemize = function(elems) {\r\n\r\n        var itemElems = this._filterFindItemElements(elems);\r\n        var Item = this.constructor.Item;\r\n\r\n        // create new Outlayer Items for collection\r\n        var items = [];\r\n        for (var i = 0; i < itemElems.length; i++) {\r\n            var elem = itemElems[i];\r\n            var item = new Item(elem, this);\r\n            items.push(item);\r\n        }\r\n\r\n        return items;\r\n    };\r\n\r\n    /**\r\n     * get item elements to be used in layout\r\n     * @param {Array or NodeList or HTMLElement} elems\r\n     * @returns {Array} items - item elements\r\n     */\r\n    proto._filterFindItemElements = function(elems) {\r\n        //return utils.filterFindElements( elems, this.options.itemSelector );\r\n        //return jQuery(elems).filter(this.options.itemSelector );\r\n        return filterFindElements(elems, this.options.itemSelector);\r\n    };\r\n\r\n\r\n\r\n    /**\r\n     * lays out all items\r\n     */\r\n    proto.layout = function() {\r\n        this._resetLayout();\r\n        //this._manageStamps();\r\n\r\n        // don't animate first layout\r\n        var layoutInstant = this._getOption('layoutInstant');\r\n        var isInstant = layoutInstant !== undefined ?\r\n            layoutInstant : !this._isLayoutInited;\r\n        this.layoutItems(this.items, isInstant);\r\n\r\n        // flag for initalized\r\n        this._isLayoutInited = true;\r\n    };\r\n\r\n    /**\r\n     * get measurement from option, for columnWidth, rowHeight, gutter\r\n     * if option is String -> get element from selector string, & get size of element\r\n     * if option is Element -> get size of element\r\n     * else use option as a number\r\n     *\r\n     * @param {String} measurement\r\n     * @param {String} size - width or height\r\n     * @private\r\n     */\r\n    proto._getMeasurement = function(measurement, size) {\r\n        var option = this.options[measurement];\r\n        var elem;\r\n        if (!option) {\r\n            // default to 0\r\n            this[measurement] = 0;\r\n        } else {\r\n            // use option as an element\r\n            if (typeof option == 'string') {\r\n                elem = this.element.querySelector(option);\r\n            } else if (option instanceof HTMLElement) {\r\n                elem = option;\r\n            }\r\n            // use size of element, if element\r\n            //this[ measurement ] = elem ? getSize( elem )[ size ] : option;\r\n            this[measurement] = elem ? $(elem)[size]() : option;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * layout a collection of item elements\r\n     * @api public\r\n     */\r\n    proto.layoutItems = function(items, isInstant) {\r\n        items = this._getItemsForLayout(items);\r\n\r\n        this._layoutItems(items, isInstant);\r\n\r\n        this._postLayout();\r\n    };\r\n\r\n    /**\r\n     * get the items to be laid out\r\n     * you may want to skip over some items\r\n     * @param {Array} items\r\n     * @returns {Array} items\r\n     */\r\n    proto._getItemsForLayout = function(items) {\r\n        return items.filter(function(item) {\r\n            return !item.isIgnored;\r\n        });\r\n    };\r\n\r\n    /**\r\n     * layout items\r\n     * @param {Array} items\r\n     * @param {Boolean} isInstant\r\n     */\r\n    proto._layoutItems = function(items, isInstant) {\r\n        // this._emitCompleteOnItems( 'layout', items );\r\n\r\n        if (!items || !items.length) {\r\n            // no items, emit event with empty array\r\n            return;\r\n        }\r\n\r\n        var queue = [];\r\n\r\n        items.forEach(function(item) {\r\n            // get x/y object from method\r\n            var position = this._getItemLayoutPosition(item);\r\n            // enqueue\r\n            position.item = item;\r\n            position.isInstant = isInstant || item.isLayoutInstant;\r\n            queue.push(position);\r\n        }, this);\r\n\r\n        this._processLayoutQueue(queue);\r\n    };\r\n\r\n    /**\r\n     * iterate over array and position each item\r\n     * Reason being - separating this logic prevents 'layout invalidation'\r\n     * thx @paul_irish\r\n     * @param {Array} queue\r\n     */\r\n    proto._processLayoutQueue = function(queue) {\r\n        queue.forEach(function(obj) {\r\n            this._positionItem(obj.item, obj.x, obj.y, obj.isInstant);\r\n        }, this);\r\n    };\r\n\r\n    /**\r\n     * Sets position of item in DOM\r\n     * @param {Outlayer.Item} item\r\n     * @param {Number} x - horizontal position\r\n     * @param {Number} y - vertical position\r\n     * @param {Boolean} isInstant - disables transitions\r\n     */\r\n    proto._positionItem = function(item, x, y, isInstant) {\r\n        if (isInstant) {\r\n            // if not transition, just set CSS\r\n            item.goTo(x, y);\r\n        } else {\r\n            item.moveTo(x, y);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Any logic you want to do after each layout,\r\n     * i.e. size the container\r\n     */\r\n    proto._postLayout = function() {\r\n        this.resizeContainer();\r\n    };\r\n\r\n    proto.resizeContainer = function() {\r\n        var isResizingContainer = this._getOption('resizeContainer');\r\n        if (!isResizingContainer) {\r\n            return;\r\n        }\r\n        var size = this._getContainerSize();\r\n        if (size) {\r\n            this._setContainerMeasure(size.width, true);\r\n            this._setContainerMeasure(size.height, false);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @param {Number} measure - size of width or height\r\n     * @param {Boolean} isWidth\r\n     */\r\n    proto._setContainerMeasure = function(measure, isWidth) {\r\n        if (measure === undefined) {\r\n            return;\r\n        }\r\n\r\n        var elemSize = this.size;\r\n        // add padding and border width if border box\r\n        if (elemSize.isBorderBox) {\r\n            measure += isWidth ? elemSize.paddingLeft + elemSize.paddingRight +\r\n                elemSize.borderLeftWidth + elemSize.borderRightWidth :\r\n                elemSize.paddingBottom + elemSize.paddingTop +\r\n                elemSize.borderTopWidth + elemSize.borderBottomWidth;\r\n        }\r\n\r\n        measure = Math.max(measure, 0);\r\n        this.element.style[isWidth ? 'width' : 'height'] = measure + 'px';\r\n    };\r\n\r\n\r\n\r\n    /**\r\n     * add items to Outlayer instance\r\n     * @param {Array or NodeList or Element} elems\r\n     * @returns {Array} items - Outlayer.Items\r\n     **/\r\n    proto.addItems = function(elems) {\r\n        var items = this._itemize(elems);\r\n        // add items to collection\r\n        if (items.length) {\r\n            this.items = this.items.concat(items);\r\n        }\r\n        return items;\r\n    };\r\n\r\n    /**\r\n     * Layout newly-appended item elements\r\n     * @param {Array or NodeList or Element} elems\r\n     */\r\n    proto.appended = function(elems) {\r\n        var items = this.addItems(elems);\r\n        if (!items.length) {\r\n            return;\r\n        }\r\n        // layout and reveal just the new items\r\n        this.layoutItems(items, true);\r\n        this.reveal(items);\r\n    };\r\n\r\n    /**\r\n     * Layout prepended elements\r\n     * @param {Array or NodeList or Element} elems\r\n     */\r\n    proto.prepended = function(elems) {\r\n        var items = this._itemize(elems);\r\n        if (!items.length) {\r\n            return;\r\n        }\r\n        // add items to beginning of collection\r\n        var previousItems = this.items.slice(0);\r\n        this.items = items.concat(previousItems);\r\n        // start new layout\r\n        this._resetLayout();\r\n        //this._manageStamps();\r\n        // layout new stuff without transition\r\n        this.layoutItems(items, true);\r\n        this.reveal(items);\r\n        // layout previous items\r\n        this.layoutItems(previousItems);\r\n    };\r\n\r\n    /**\r\n     * reveal a collection of items\r\n     * @param {Array of Outlayer.Items} items\r\n     */\r\n    proto.reveal = function(items) {\r\n        // this._emitCompleteOnItems( 'reveal', items );\r\n        if (!items || !items.length) {\r\n            return;\r\n        }\r\n        items.forEach(function(item) {\r\n            //item.reveal();\r\n        });\r\n    };\r\n\r\n    /**\r\n     * hide a collection of items\r\n     * @param {Array of Outlayer.Items} items\r\n     */\r\n    proto.hide = function(items) {\r\n        // this._emitCompleteOnItems( 'hide', items );\r\n        if (!items || !items.length) {\r\n            return;\r\n        }\r\n        items.forEach(function(item) {\r\n            item.hide();\r\n        });\r\n    };\r\n\r\n    /**\r\n     * reveal item elements\r\n     * @param {Array}, {Element}, {NodeList} items\r\n     */\r\n    proto.revealItemElements = function(elems) {\r\n        var items = this.getItems(elems);\r\n        this.reveal(items);\r\n    };\r\n\r\n    /**\r\n     * hide item elements\r\n     * @param {Array}, {Element}, {NodeList} items\r\n     */\r\n    proto.hideItemElements = function(elems) {\r\n        var items = this.getItems(elems);\r\n        this.hide(items);\r\n    };\r\n\r\n    /**\r\n     * get Outlayer.Item, given an Element\r\n     * @param {Element} elem\r\n     * @param {Function} callback\r\n     * @returns {Outlayer.Item} item\r\n     */\r\n    proto.getItem = function(elem) {\r\n        // loop through items to get the one that matches\r\n        for (var i = 0; i < this.items.length; i++) {\r\n            var item = this.items[i];\r\n            if (item.element == elem) {\r\n                // return item\r\n                return item;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * get collection of Outlayer.Items, given Elements\r\n     * @param {Array} elems\r\n     * @returns {Array} items - Outlayer.Items\r\n     */\r\n    proto.getItems = function(elems) {\r\n        elems = makeArray(elems);\r\n        var items = [];\r\n        elems.forEach(function(elem) {\r\n            var item = this.getItem(elem);\r\n            if (item) {\r\n                items.push(item);\r\n            }\r\n        }, this);\r\n\r\n        return items;\r\n    };\r\n\r\n    /**\r\n     * remove element(s) from instance and DOM\r\n     * @param {Array or NodeList or Element} elems\r\n     */\r\n    proto.remove = function(elems) {\r\n        var removeItems = this.getItems(elems);\r\n\r\n        // this._emitCompleteOnItems('remove', removeItems);\r\n\r\n        // bail if no items to remove\r\n        if (!removeItems || !removeItems.length) {\r\n            return;\r\n        }\r\n\r\n        removeItems.forEach(function(item) {\r\n            if(item.element) item.element.remove();\r\n            // remove item from collection\r\n            removeFrom(this.items, item);\r\n        }, this);\r\n    };\r\n\r\n    return skylark.attach(\"intg.Masonry\", Masonry);\r\n});\r\n"]}